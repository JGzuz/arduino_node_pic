CCS PCM C Compiler, Version 5.015, 5967               23-sep.-19 10:38

               Filename:   C:\Users\Morpheus\Desktop\ANP\codigo_pic\com_serial_pic.lst

               ROM used:   338 words (4%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           12 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   096
0003:  NOP
.................... #include <16f877a.h>//pic a utilizar 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  RETLW  4F
0005:  RETLW  4B
0006:  RETLW  00
0007:  RETLW  4F
0008:  RETLW  4B
0009:  RETLW  00
000A:  DATA B0,18
000B:  DATA B2,19
000C:  DATA B4,1A
000D:  DATA B6,1B
000E:  DATA B8,1C
000F:  DATA 00,00
0010:  DATA B1,18
0011:  DATA B1,18
0012:  DATA B1,18
0013:  DATA B1,18
0014:  DATA B1,18
0015:  DATA 00,01
0016:  DATA 32,19
0017:  DATA 32,19
0018:  DATA 32,19
0019:  DATA 32,19
001A:  DATA 32,19
001B:  DATA 00,01
001C:  DATA B3,19
001D:  DATA B3,19
001E:  DATA B3,19
001F:  DATA B3,19
0020:  DATA B3,19
0021:  DATA 00,01
0022:  DATA 34,1A
0023:  DATA 34,1A
0024:  DATA 34,1A
0025:  DATA 34,1A
0026:  DATA 34,1A
0027:  DATA 00,00
0028:  MOVF   0B,W
0029:  MOVWF  23
002A:  BCF    0B.7
002B:  BSF    03.5
002C:  BSF    03.6
002D:  BSF    0C.7
002E:  BSF    0C.0
002F:  NOP
0030:  NOP
0031:  BCF    03.5
0032:  BCF    03.6
0033:  BTFSC  23.7
0034:  BSF    0B.7
0035:  BSF    03.6
0036:  MOVF   0C,W
0037:  ANDLW  7F
0038:  BTFSC  03.2
0039:  GOTO   07E
003A:  BCF    03.6
003B:  MOVWF  23
003C:  BSF    03.6
003D:  MOVF   0D,W
003E:  BCF    03.6
003F:  MOVWF  24
0040:  BSF    03.6
0041:  MOVF   0F,W
0042:  BCF    03.6
0043:  MOVWF  25
0044:  MOVF   23,W
0045:  BTFSS  0C.4
0046:  GOTO   045
0047:  MOVWF  19
0048:  MOVF   24,W
0049:  BSF    03.6
004A:  MOVWF  0D
004B:  BCF    03.6
004C:  MOVF   25,W
004D:  BSF    03.6
004E:  MOVWF  0F
004F:  BCF    03.6
0050:  MOVF   0B,W
0051:  MOVWF  26
0052:  BCF    0B.7
0053:  BSF    03.5
0054:  BSF    03.6
0055:  BSF    0C.7
0056:  BSF    0C.0
0057:  NOP
0058:  NOP
0059:  BCF    03.5
005A:  BCF    03.6
005B:  BTFSC  26.7
005C:  BSF    0B.7
005D:  BSF    03.6
005E:  RLF    0C,W
005F:  RLF    0E,W
0060:  ANDLW  7F
0061:  BTFSC  03.2
0062:  GOTO   07E
0063:  BCF    03.6
0064:  MOVWF  23
0065:  BSF    03.6
0066:  MOVF   0D,W
0067:  BCF    03.6
0068:  MOVWF  24
0069:  BSF    03.6
006A:  MOVF   0F,W
006B:  BCF    03.6
006C:  MOVWF  25
006D:  MOVF   23,W
006E:  BTFSS  0C.4
006F:  GOTO   06E
0070:  MOVWF  19
0071:  MOVF   24,W
0072:  BSF    03.6
0073:  MOVWF  0D
0074:  BCF    03.6
0075:  MOVF   25,W
0076:  BSF    03.6
0077:  MOVWF  0F
0078:  INCF   0D,F
0079:  BTFSC  03.2
007A:  INCF   0F,F
007B:  BCF    03.6
007C:  GOTO   028
007D:  BSF    03.6
007E:  BCF    03.6
007F:  RETURN
....................  
.................... #list 
....................  
.................... #fuses hs, nowdt, noprotect, noput 
.................... #use delay(clock=20M)//cristal 
0080:  MOVLW  24
0081:  MOVWF  04
0082:  BCF    03.7
0083:  MOVF   00,W
0084:  BTFSC  03.2
0085:  GOTO   093
0086:  MOVLW  06
0087:  MOVWF  78
0088:  CLRF   77
0089:  DECFSZ 77,F
008A:  GOTO   089
008B:  DECFSZ 78,F
008C:  GOTO   088
008D:  MOVLW  7B
008E:  MOVWF  77
008F:  DECFSZ 77,F
0090:  GOTO   08F
0091:  DECFSZ 00,F
0092:  GOTO   086
0093:  BCF    0A.3
0094:  BCF    0A.4
0095:  GOTO   14A (RETURN)
.................... #use rs232(baud=9600, rcv=pin_c7, xmit=pin_c6, bits=8, parity=N)//configuracion transmision en serie 
.................... #use standard_io(c) 
....................  
....................     
....................     
....................    void main () { 
0096:  MOVF   03,W
0097:  ANDLW  1F
0098:  MOVWF  03
0099:  MOVLW  81
009A:  BSF    03.5
009B:  MOVWF  19
009C:  MOVLW  A6
009D:  MOVWF  18
009E:  MOVLW  90
009F:  BCF    03.5
00A0:  MOVWF  18
00A1:  MOVLW  FF
00A2:  MOVWF  20
00A3:  BSF    03.5
00A4:  BSF    1F.0
00A5:  BSF    1F.1
00A6:  BSF    1F.2
00A7:  BCF    1F.3
00A8:  MOVLW  07
00A9:  MOVWF  1C
00AA:  BCF    03.7
....................     
....................     char leer; 
....................     //char escribe; 
....................     set_tris_b(0b00000000);//configuracion pines puerto b como salida 
00AB:  MOVLW  00
00AC:  MOVWF  06
....................     output_b(0b00000000);//estado en bajo de todos los pines del puerto b 
00AD:  CLRF   06
00AE:  BCF    03.5
00AF:  CLRF   06
....................     output_high(pin_b7);//salida en alto para indicar que el pic ha iniciado 
00B0:  BSF    03.5
00B1:  BCF    06.7
00B2:  BCF    03.5
00B3:  BSF    06.7
....................     int i=0; 
00B4:  CLRF   22
....................     
....................       while(true){   
....................        
....................       //checa si hay datos en bufer////////////// 
....................       if(kbhit()){ 
00B5:  BTFSS  0C.5
00B6:  GOTO   0DA
....................          output_toggle(pin_b1); 
00B7:  BSF    03.5
00B8:  BCF    06.1
00B9:  MOVLW  02
00BA:  BCF    03.5
00BB:  XORWF  06,F
....................          leer=getc();//almacena datos en leer 
00BC:  BTFSS  0C.5
00BD:  GOTO   0BC
00BE:  MOVF   1A,W
00BF:  MOVWF  21
....................          if(leer=="OK"){ 
00C0:  MOVLW  00
00C1:  MOVWF  7A
00C2:  MOVLW  04
00C3:  SUBWF  21,W
00C4:  BTFSS  03.2
00C5:  GOTO   0CD
00C6:  MOVF   7A,F
00C7:  BTFSS  03.2
00C8:  GOTO   0CD
....................             output_high(pin_b0); 
00C9:  BSF    03.5
00CA:  BCF    06.0
00CB:  BCF    03.5
00CC:  BSF    06.0
....................          } 
....................          if(leer!="OK"){ 
00CD:  MOVLW  00
00CE:  MOVWF  7A
00CF:  MOVLW  07
00D0:  SUBWF  21,W
00D1:  BTFSS  03.2
00D2:  GOTO   0D6
00D3:  MOVF   7A,F
00D4:  BTFSC  03.2
00D5:  GOTO   0DA
....................             output_low(pin_b0); 
00D6:  BSF    03.5
00D7:  BCF    06.0
00D8:  BCF    03.5
00D9:  BCF    06.0
....................          } 
....................       }/////////////////////////////////////////// 
....................        
....................       //mandar un numero a arduino por serie 
....................       if(input(pin_b1)==1){ 
00DA:  BSF    03.5
00DB:  BSF    06.1
00DC:  BCF    03.5
00DD:  BTFSS  06.1
00DE:  GOTO   150
....................          output_toggle(pin_b2); 
00DF:  BSF    03.5
00E0:  BCF    06.2
00E1:  MOVLW  04
00E2:  BCF    03.5
00E3:  XORWF  06,F
....................          switch (i){ 
00E4:  MOVF   22,W
00E5:  BTFSC  03.2
00E6:  GOTO   0F4
00E7:  XORLW  01
00E8:  BTFSC  03.2
00E9:  GOTO   104
00EA:  XORLW  03
00EB:  BTFSC  03.2
00EC:  GOTO   114
00ED:  XORLW  01
00EE:  BTFSC  03.2
00EF:  GOTO   124
00F0:  XORLW  07
00F1:  BTFSC  03.2
00F2:  GOTO   134
00F3:  GOTO   144
....................          case 0:puts("0123456789");break; 
00F4:  MOVLW  0A
00F5:  BSF    03.6
00F6:  MOVWF  0D
00F7:  MOVLW  00
00F8:  MOVWF  0F
00F9:  BCF    03.6
00FA:  CALL   028
00FB:  MOVLW  0D
00FC:  BTFSS  0C.4
00FD:  GOTO   0FC
00FE:  MOVWF  19
00FF:  MOVLW  0A
0100:  BTFSS  0C.4
0101:  GOTO   100
0102:  MOVWF  19
0103:  GOTO   144
....................          case 1:puts("1111111111");break; 
0104:  MOVLW  10
0105:  BSF    03.6
0106:  MOVWF  0D
0107:  MOVLW  00
0108:  MOVWF  0F
0109:  BCF    03.6
010A:  CALL   028
010B:  MOVLW  0D
010C:  BTFSS  0C.4
010D:  GOTO   10C
010E:  MOVWF  19
010F:  MOVLW  0A
0110:  BTFSS  0C.4
0111:  GOTO   110
0112:  MOVWF  19
0113:  GOTO   144
....................          case 2:puts("2222222222");break; 
0114:  MOVLW  16
0115:  BSF    03.6
0116:  MOVWF  0D
0117:  MOVLW  00
0118:  MOVWF  0F
0119:  BCF    03.6
011A:  CALL   028
011B:  MOVLW  0D
011C:  BTFSS  0C.4
011D:  GOTO   11C
011E:  MOVWF  19
011F:  MOVLW  0A
0120:  BTFSS  0C.4
0121:  GOTO   120
0122:  MOVWF  19
0123:  GOTO   144
....................          case 3:puts("3333333333");break; 
0124:  MOVLW  1C
0125:  BSF    03.6
0126:  MOVWF  0D
0127:  MOVLW  00
0128:  MOVWF  0F
0129:  BCF    03.6
012A:  CALL   028
012B:  MOVLW  0D
012C:  BTFSS  0C.4
012D:  GOTO   12C
012E:  MOVWF  19
012F:  MOVLW  0A
0130:  BTFSS  0C.4
0131:  GOTO   130
0132:  MOVWF  19
0133:  GOTO   144
....................          case 4:puts("4444444444");break; 
0134:  MOVLW  22
0135:  BSF    03.6
0136:  MOVWF  0D
0137:  MOVLW  00
0138:  MOVWF  0F
0139:  BCF    03.6
013A:  CALL   028
013B:  MOVLW  0D
013C:  BTFSS  0C.4
013D:  GOTO   13C
013E:  MOVWF  19
013F:  MOVLW  0A
0140:  BTFSS  0C.4
0141:  GOTO   140
0142:  MOVWF  19
0143:  GOTO   144
....................          default:break; 
....................          }i++;delay_ms(1000); 
0144:  INCF   22,F
0145:  MOVLW  04
0146:  MOVWF  23
0147:  MOVLW  FA
0148:  MOVWF  24
0149:  GOTO   080
014A:  DECFSZ 23,F
014B:  GOTO   147
....................          if(i==5)i=0; 
014C:  MOVF   22,W
014D:  SUBLW  05
014E:  BTFSC  03.2
014F:  CLRF   22
....................       } 
0150:  GOTO   0B5
....................        
....................        
....................     
....................       }//fin ciclo principal 
....................    } 
....................  
0151:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
